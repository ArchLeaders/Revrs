<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Revrs</name>
    </assembly>
    <members>
        <member name="T:Revrs.Extensions.ReaderExtensions">
            <summary>
            Extension methods for reading unmanaged <see langword="primitive"/> and <see langword="struct"/> data types from a <see cref="T:System.IO.Stream"/> or <see cref="T:System.Span`1"/>, swapping the endianness when required.
            </summary>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.Read``1(System.IO.Stream)">
            <summary>
            Read <typeparamref name="T"/> from the provided <paramref name="stream"/> in the system endianness.
            <para>
            <b>Note:</b> Reading types larger than 500 KB will allocate a buffer on the heap.
            </para>
            </summary>
            <typeparam name="T">The primitive or struct type to read.</typeparam>
            <returns>A new instance of <typeparamref name="T"/> parsed from the <paramref name="stream"/>.</returns>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.Read``1(System.Span{System.Byte})">
            <summary>
            Read <typeparamref name="T"/> from the provided <paramref name="slice"/> in the system endianness.
            </summary>
            <typeparam name="T">The primitive or struct type to read.</typeparam>
            <returns>A reference to <typeparamref name="T"/> over a span of data.</returns>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.Read``1(System.IO.Stream,Revrs.Endianness)">
            <summary>
            Read <typeparamref name="T"/> from the provided <paramref name="stream"/> in the provided <paramref name="endianness"/>.
            <para>
            <b>Warning: </b> Only read <a href="https://learn.microsoft.com/en-us/dotnet/api/system.type.isprimitive">primitive types</a>
            with this method, the entire buffer slice is reversed when endian swapping is required.
            </para>
            <para>
            <b>Note:</b> Reading types larger than 500 KB will allocate a buffer on the heap.
            </para>
            </summary>
            <typeparam name="T">The primitive type to read.</typeparam>
            <returns>A new instance of <typeparamref name="T"/> parsed from the <paramref name="stream"/>.</returns>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.Read``1(System.Span{System.Byte},Revrs.Endianness)">
            <summary>
            Read <typeparamref name="T"/> from the provided <paramref name="slice"/> in the provided <paramref name="endianness"/>.
            <para>
            <b>Warning: </b> Only read <a href="https://learn.microsoft.com/en-us/dotnet/api/system.type.isprimitive">primitive types</a>
            with this method, the entire buffer slice is reversed when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The primitive type to read.</typeparam>
            <returns>A reference to <typeparamref name="T"/> over a span of data.</returns>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.Read``2(System.IO.Stream,Revrs.Endianness)">
            <summary>
            Read <typeparamref name="T"/> from the provided <paramref name="stream"/> in the provided <paramref name="endianness"/>.
            <para>
            <typeparamref name="R"/>, implementing <see cref="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)"/>,
            will be used to reverse the buffer slice when endian swapping is required.
            </para>
            <para>
            <b>Note:</b> Reading types larger than 500 KB will allocate a buffer on the heap.
            </para>
            </summary>
            <typeparam name="T">The struct to read</typeparam>
            <typeparam name="R">The <see cref="T:Revrs.IStructReverser"/> to reverse <typeparamref name="T"/></typeparam>
            <returns>A new instance of <typeparamref name="T"/> parsed from the <paramref name="stream"/>.</returns>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.Read``2(System.Span{System.Byte},Revrs.Endianness)">
            <summary>
            Read <typeparamref name="T"/> from the provided <paramref name="slice"/> in the provided <paramref name="endianness"/>.
            <para>
            <typeparamref name="R"/>, implementing <see cref="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)"/>,
            will be used to reverse the buffer slice when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The struct to read</typeparam>
            <typeparam name="R">The <see cref="T:Revrs.IStructReverser"/> to reverse <typeparamref name="T"/></typeparam>
            <returns>A reference to <typeparamref name="T"/> over a span of data.</returns>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.ReadSpan``1(System.Span{System.Byte})">
            <summary>
            Read <typeparamref name="T"/>'s from the provided <paramref name="slice"/> until the end of the slice in the system endianness.
            </summary>
            <typeparam name="T">The <see langword="primitive"/> or <see langword="unmanaged"/> <see langword="struct"/> type to read</typeparam>
            <returns>A <see cref="T:System.Span`1"/> where the length is the <paramref name="slice"/> length / <see langword="sizeof"/>(<typeparamref name="T"/>).</returns>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.ReadSpan``1(System.Span{System.Byte},System.Int32)">
            <summary>
            Read <paramref name="count"/> <typeparamref name="T"/>'s from the provided <paramref name="slice"/> in the system endianness.
            </summary>
            <typeparam name="T">The <see langword="primitive"/> or <see langword="unmanaged"/> <see langword="struct"/> type to read</typeparam>
            <param name="slice">The slice of data to read from.</param>
            <param name="count">The expected number of <typeparamref name="T"/> to read.</param>
            <returns>A <see cref="T:System.Span`1"/> where the length of the <see cref="T:System.Span`1"/> is <paramref name="count"/>.</returns>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.ReadSpan``1(System.Span{System.Byte},System.Int32,Revrs.Endianness)">
            <summary>
            Read <paramref name="count"/> <typeparamref name="T"/>'s from the provided <paramref name="slice"/> in the provided <paramref name="endianness"/>.
            <para>
            <b>Warning: </b> Only read <a href="https://learn.microsoft.com/en-us/dotnet/api/system.type.isprimitive">primitive types</a>
            with this method, the entire buffer slice is reversed when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The primitive type to read</typeparam>
            <param name="slice">The slice of data to read from.</param>
            <param name="count">The number of <typeparamref name="T"/> to read.</param>
            <param name="endianness">The <see langword="byte-order"/> to use when reading the <paramref name="slice"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> where the length of the <see cref="T:System.Span`1"/> is <paramref name="count"/>.</returns>
        </member>
        <member name="M:Revrs.Extensions.ReaderExtensions.ReadSpan``2(System.Span{System.Byte},System.Int32,Revrs.Endianness)">
            <summary>
            Read <paramref name="count"/> <typeparamref name="T"/>'s from the provided <paramref name="slice"/> in the provided <paramref name="endianness"/>.
            <para>
            <typeparamref name="R"/>, implementing <see cref="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)"/>,
            will be used to reverse the buffer slice when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The struct to read</typeparam>
            <typeparam name="R">The <see cref="T:Revrs.IStructReverser"/> to reverse <typeparamref name="T"/></typeparam>
            <param name="slice">The slice of data to read from.</param>
            <param name="count">The number of <typeparamref name="T"/> to read.</param>
            <param name="endianness">The <see langword="byte-order"/> to use when reading the <paramref name="slice"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> where the length of the <see cref="T:System.Span`1"/> is <paramref name="count"/>.</returns>
        </member>
        <member name="T:Revrs.Extensions.WriterExtensions">
            <summary>
            Extension methods for writing unmanaged <see langword="primitive"/> and <see langword="struct"/> data types into a <see cref="T:System.IO.Stream"/>, reversing the written values when required.
            </summary>
        </member>
        <member name="M:Revrs.Extensions.WriterExtensions.Write``1(System.IO.Stream,``0)">
            <summary>
            Write the provided <paramref name="value"/> into the <paramref name="stream"/> in the system endianness.
            <para>
            <b>Note:</b> Writing types larger than 500 KB will allocate a buffer on the heap.
            </para>
            </summary>
            <typeparam name="T">The type to write.</typeparam>
            <param name="stream">The stream to write the <paramref name="value"/> to.</param>
            <param name="value">The <see langword="unmanaged"/> <see langword="primitive"/> or <see langword="struct"/> value to write.</param>
        </member>
        <member name="M:Revrs.Extensions.WriterExtensions.Write``1(System.IO.Stream,``0,Revrs.Endianness)">
            <summary>
            Write the provided <paramref name="value"/> into the <paramref name="stream"/> in the provided <paramref name="endianness"/>.
            <para>
            <b>Note:</b> Writing types larger than 500 KB will allocate a buffer on the heap.
            </para>
            </summary>
            <typeparam name="T">The type to write.</typeparam>
            <param name="stream">The stream to write the <paramref name="value"/> to.</param>
            <param name="value">The <see langword="unmanaged"/> <see langword="primitive"/> value to write.</param>
            <param name="endianness">The <see langword="byte-order"/> to use when writing the <paramref name="value"/>.</param>
        </member>
        <member name="M:Revrs.Extensions.WriterExtensions.Write``2(System.IO.Stream,``0,Revrs.Endianness)">
            <summary>
            Write the provided <paramref name="value"/> into the <paramref name="stream"/> in the provided <paramref name="endianness"/>.
            <para>
            <typeparamref name="R"/>, implementing <see cref="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)"/>,
            will be used to reverse the written value when endian swapping is required.
            </para>
            <para>
            <b>Note:</b> Writing types larger than 500 KB will allocate a buffer on the heap.
            </para>
            </summary>
            <typeparam name="T">The type to write.</typeparam>
            <typeparam name="R">The <see cref="T:Revrs.IStructReverser"/> to reverse <typeparamref name="T"/></typeparam>
            <param name="stream">The stream to write the <paramref name="value"/> to.</param>
            <param name="value">The <see langword="unmanaged"/> <see langword="primitive"/> value to write.</param>
            <param name="endianness">The <see langword="byte-order"/> to use when writing the <paramref name="value"/>.</param>
        </member>
        <member name="T:Revrs.IStructReverser">
            <summary>
            Defines a static function to reverse a <see cref="T:System.Span`1"/> in predefined slices.
            <para>
            For optimal performance, <see cref="T:Revrs.IStructReverser"/> should be implemented by a dedicated <see langword="class"/> inside the target <see langword="struct"/>, not implemented by the <see langword="struct"/> itself.
            </para>
            </summary>
        </member>
        <member name="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)">
            <summary>
            Reverses the <paramref name="slice"/> in predefined slices to match the target <see langword="struct"/>.
            </summary>
            <param name="slice"></param>
        </member>
        <member name="T:Revrs.Endianness">
            <summary>
            Byte order mark (BoM) defined as a <see langword="big-endian"/> unsigned word (<see langword="ushort"/>)
            </summary>
        </member>
        <member name="F:Revrs.Endianness.Big">
            <summary>
            Big Endian Byte order
            </summary>
        </member>
        <member name="F:Revrs.Endianness.Little">
            <summary>
            Little Endian Byte Order
            </summary>
        </member>
        <member name="T:Revrs.RevrsPrimitives">
            <summary>
            Primitive extension methods used by <see cref="N:Revrs"/>.
            </summary>
        </member>
        <member name="M:Revrs.RevrsPrimitives.IsSystemEndianness(Revrs.Endianness)">
            <summary>
            Compare the system endianness with the provided <paramref name="endianness"/>.
            </summary>
            <returns>
            <see langword="true"/> if the system <see cref="T:Revrs.Endianness"/> matches the provided <paramref name="endianness"/>.
            </returns>
        </member>
        <member name="M:Revrs.RevrsPrimitives.IsNotSystemEndianness(Revrs.Endianness)">
            <summary>
            Compare the system endianness with the provided <paramref name="endianness"/>.
            </summary>
            <returns>
            <see langword="true"/> if the system <see cref="T:Revrs.Endianness"/> <i>does not match</i> the provided <paramref name="endianness"/>.
            </returns>
        </member>
        <member name="M:Revrs.RevrsPrimitives.AlignUp``1(``0,``0)">
            <summary>
            Align <paramref name="value"/> up to <paramref name="size"/> and return the result
            </summary>
            <typeparam name="T">The integral type to return</typeparam>
            <param name="value">The value to align</param>
            <param name="size">The alignment size</param>
            <returns></returns>
        </member>
        <member name="M:Revrs.RevrsPrimitives.AlignDown``1(``0,``0)">
            <summary>
            Align <paramref name="value"/> down to <paramref name="size"/> and return the result
            </summary>
            <typeparam name="T">The integral type to return</typeparam>
            <param name="value">The value to align</param>
            <param name="size">The alignment size</param>
            <returns></returns>
        </member>
        <member name="T:Revrs.RevrsReader">
            <summary>
            Reads <see langword="primitive"/> and <see langword="struct"/> data types over a <see cref="T:System.Span`1"/> of bytes, reversing the underlying <see cref="T:System.Span`1"/> when required.
            </summary>
        </member>
        <member name="M:Revrs.RevrsReader.#ctor(System.Span{System.Byte},Revrs.Endianness)">
            <summary>
            Reads <see langword="primitive"/> and <see langword="struct"/> data types over a <see cref="T:System.Span`1"/> of bytes, reversing the underlying <see cref="T:System.Span`1"/> when required.
            </summary>
        </member>
        <member name="F:Revrs.RevrsReader.Data">
            <summary>
            A <see cref="T:System.Span`1"/> over the input buffer.
            </summary>
        </member>
        <member name="F:Revrs.RevrsReader.Endianness">
            <summary>
            The target <see langword="byte-order"/> of the reader.
            </summary>
        </member>
        <member name="F:Revrs.RevrsReader.Position">
            <summary>
            The current position of the reader.
            </summary>
        </member>
        <member name="P:Revrs.RevrsReader.Length">
            <summary>
            Get the length of the underlying <see cref="T:System.Span`1"/>.
            </summary>
        </member>
        <member name="M:Revrs.RevrsReader.Native(System.Span{System.Byte})">
            <summary>
            Create a new <see cref="T:Revrs.RevrsReader"/> using the system-native <see langword="byte-order"/>.
            </summary>
            <param name="buffer"></param>
            <returns>A <see langword="new"/> <see cref="T:Revrs.RevrsReader"/> instatiated over the provided <paramref name="buffer"/> using the system-native <see langword="byte-order"/>.</returns>
        </member>
        <member name="M:Revrs.RevrsReader.Seek(System.Int32)">
            <summary>
            Move the reader to an absolute <paramref name="position"/>.
            </summary>
            <param name="position">The absolute position to move reader to.</param>
        </member>
        <member name="M:Revrs.RevrsReader.Move(System.Int32)">
            <summary>
            Advance the reader position by a positive or negative <paramref name="size"/>.
            </summary>
            <param name="size">The positive or negative amount to move the reader position.</param>
        </member>
        <member name="M:Revrs.RevrsReader.Align(System.Int32)">
            <summary>
            Align the position <b>up (+)</b> to the provided <paramref name="size"/>.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Revrs.RevrsReader.AlignDown(System.Int32)">
            <summary>
            Align the position <b>down (-)</b> to the provided <paramref name="size"/>.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Revrs.RevrsReader.Read(System.Int32)">
            <summary>
            Get a span of bytes from the readers current position and advance forward by the provided <paramref name="length"/>.
            </summary>
            <param name="length"></param>
            <returns>A span of bytes where the size of the span is <paramref name="length"/></returns>
        </member>
        <member name="M:Revrs.RevrsReader.Read(System.Int32,System.Int32)">
            <summary>
            Get a span of bytes from the provided <paramref name="offset"/> and advance forward by the provided <paramref name="length"/>.
            </summary>
            <param name="offset">The absolue position to start reading the span.</param>
            <param name="length">The length of data to read.</param>
            <returns>A span of bytes where the size of the span is <paramref name="length"/></returns>
        </member>
        <member name="M:Revrs.RevrsReader.Read``1">
            <summary>
            Read <typeparamref name="T"/> from the readers current position and advance forward by <see langword="sizeof"/>(<typeparamref name="T"/>).
            <para>
            <b>Warning: </b> Only read <a href="https://learn.microsoft.com/en-us/dotnet/api/system.type.isprimitive">primitive types</a>
            with this method, the entire buffer slice is reversed when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The primitive type to read.</typeparam>
            <returns>A reference to <typeparamref name="T"/> over a span of data.</returns>
        </member>
        <member name="M:Revrs.RevrsReader.Read``1(System.Int32)">
            <summary>
            Read <typeparamref name="T"/> from the provided <paramref name="offset"/> and advance forward by <see langword="sizeof"/>(<typeparamref name="T"/>).
            <para>
            <b>Warning: </b> Only read <a href="https://learn.microsoft.com/en-us/dotnet/api/system.type.isprimitive">primitive types</a>
            with this method, the entire buffer slice is reversed when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The primitive type to read.</typeparam>
            <param name="offset">The absolue position to start reading the struct.</param>
            <returns>A reference to <typeparamref name="T"/> over a span of data.</returns>
        </member>
        <member name="M:Revrs.RevrsReader.Read``2">
            <summary>
            Read <typeparamref name="T"/> from the readers current position and advance forward by <see langword="sizeof"/>(<typeparamref name="T"/>).
            <para>
            <typeparamref name="R"/>, implementing <see cref="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)"/>,
            will be used to reverse the buffer slice when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The struct to read</typeparam>
            <typeparam name="R">The <see cref="T:Revrs.IStructReverser"/> to reverse <typeparamref name="T"/></typeparam>
            <returns>A reference to <typeparamref name="T"/> over a span of data.</returns>
        </member>
        <member name="M:Revrs.RevrsReader.Read``2(System.Int32)">
            <summary>
            Read <typeparamref name="T"/> from the provided <paramref name="offset"/> and advance forward by <see langword="sizeof"/>(<typeparamref name="T"/>).
            <para>
            <typeparamref name="R"/>, implementing <see cref="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)"/>,
            will be used to reverse the buffer slice when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The struct to read</typeparam>
            <typeparam name="R">The <see cref="T:Revrs.IStructReverser"/> to reverse <typeparamref name="T"/></typeparam>
            <param name="offset">The absolue position to start reading the struct.</param>
            <returns>A reference to <typeparamref name="T"/> over a span of data.</returns>
        </member>
        <member name="M:Revrs.RevrsReader.ReadSpan``1(System.Int32)">
            <summary>
            Read <paramref name="count"/> <typeparamref name="T"/>'s from the readers current position and advance forward by <see langword="sizeof"/>(<typeparamref name="T"/>) * <paramref name="count"/>.
            <para>
            <b>Warning: </b> Only read <a href="https://learn.microsoft.com/en-us/dotnet/api/system.type.isprimitive">primitive types</a>
            with this method, the entire buffer slice is reversed when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The primitive type to read</typeparam>
            <param name="count">The number of <typeparamref name="T"/> to read.</param>
            <returns>A <see cref="T:System.Span`1"/> where the length of the <see cref="T:System.Span`1"/> is <paramref name="count"/>.</returns>
        </member>
        <member name="M:Revrs.RevrsReader.ReadSpan``1(System.Int32,System.Int32)">
            <summary>
            Read <paramref name="count"/> <typeparamref name="T"/>'s from the provided <paramref name="offset"/> and advance forward by <see langword="sizeof"/>(<typeparamref name="T"/>) * <paramref name="count"/>.
            <para>
            <b>Warning: </b> Only read <a href="https://learn.microsoft.com/en-us/dotnet/api/system.type.isprimitive">primitive types</a>
            with this method, the entire buffer slice is reversed when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The primitive type to read</typeparam>
            <param name="count">The number of <typeparamref name="T"/> to read.</param>
            <param name="offset">The absolue position to start reading the primitives.</param>
            <returns>A <see cref="T:System.Span`1"/> where the length of the <see cref="T:System.Span`1"/> is <paramref name="count"/>.</returns>
        </member>
        <member name="M:Revrs.RevrsReader.ReadSpan``2(System.Int32)">
            <summary>
            Read <paramref name="count"/> <typeparamref name="T"/>'s from the readers current position and advance forward by <see langword="sizeof"/>(<typeparamref name="T"/>) * <paramref name="count"/>.
            <para>
            <typeparamref name="R"/>, implementing <see cref="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)"/>,
            will be used to reverse the buffer slice when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The struct to read</typeparam>
            <typeparam name="R">The <see cref="T:Revrs.IStructReverser"/> to reverse <typeparamref name="T"/></typeparam>
            <param name="count">The number of <typeparamref name="T"/> to read.</param>
            <returns>A <see cref="T:System.Span`1"/> where the length of the <see cref="T:System.Span`1"/> is <paramref name="count"/>.</returns>
        </member>
        <member name="M:Revrs.RevrsReader.ReadSpan``2(System.Int32,System.Int32)">
            <summary>
            Read <paramref name="count"/> <typeparamref name="T"/>'s from the provided <paramref name="offset"/> and advance forward by <see langword="sizeof"/>(<typeparamref name="T"/>) * <paramref name="count"/>.
            <para>
            <typeparamref name="R"/>, implementing <see cref="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)"/>,
            will be used to reverse the buffer slice when endian swapping is required.
            </para>
            </summary>
            <typeparam name="T">The struct to read</typeparam>
            <typeparam name="R">The <see cref="T:Revrs.IStructReverser"/> to reverse <typeparamref name="T"/></typeparam>
            <param name="count">The number of <typeparamref name="T"/> to read.</param>
            <param name="offset">The absolue position to start reading the structs.</param>
            <returns>A <see cref="T:System.Span`1"/> where the length of the <see cref="T:System.Span`1"/> is <paramref name="count"/>.</returns>
        </member>
        <member name="M:Revrs.RevrsReader.ReadSpan``1(System.Span{System.Byte},System.Int32,System.Int32)">
            <summary>
            Local function prefered over <see cref="M:Revrs.Extensions.ReaderExtensions.ReadSpan``1(System.Span{System.Byte},System.Int32,Revrs.Endianness)"/> for performance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Revrs.RevrsReader.ReadSpan``2(System.Span{System.Byte},System.Int32,System.Int32)">
            <summary>
            Local function prefered over <see cref="M:Revrs.Extensions.ReaderExtensions.ReadSpan``2(System.Span{System.Byte},System.Int32,Revrs.Endianness)"/> for performance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Revrs.RevrsWriter">
            <summary>
            Writes <see langword="primitive"/> and <see langword="struct"/> data types into a <see cref="T:System.IO.Stream"/>, reversing the written values when required.
            </summary>
        </member>
        <member name="P:Revrs.RevrsWriter.Position">
            <summary>
            The current position of the stream.
            </summary>
        </member>
        <member name="M:Revrs.RevrsWriter.#ctor(System.IO.Stream@,Revrs.Endianness)">
            <summary>
            Create a new <see cref="T:Revrs.RevrsWriter"/> from a <paramref name="stream"/> using the provided <paramref name="endianness"/>.
            </summary>
            <param name="stream"></param>
            <param name="endianness"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Revrs.RevrsWriter.Seek(System.Int64)">
            <summary>
            Move the stream to an absolute <paramref name="position"/>.
            </summary>
            <param name="position">The absolute position to move reader to.</param>
        </member>
        <member name="M:Revrs.RevrsWriter.Move(System.Int64)">
            <summary>
            Advance the stream position by a positive or negative <paramref name="size"/>.
            </summary>
            <param name="size">The positive or negative amount to move the reader position.</param>
        </member>
        <member name="M:Revrs.RevrsWriter.Align(System.Int64)">
            <summary>
            Align the position <b>up (+)</b> to the provided <paramref name="size"/>.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Revrs.RevrsWriter.AlignDown(System.Int64)">
            <summary>
            Align the position <b>down (-)</b> to the provided <paramref name="size"/>.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Revrs.RevrsWriter.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Write a <paramref name="buffer"/> of bytes and advance by the <paramref name="buffer"/> length.
            </summary>
            <param name="buffer">The buffer of bytes to write to the stream.</param>
        </member>
        <member name="M:Revrs.RevrsWriter.Write``1(``0)">
            <summary>
            Write the provided <paramref name="value"/> and advance the stream position by <see langword="sizeof"/>(<typeparamref name="T"/>).
            <para>
            <b>Note:</b> Writing types larger than 500 KB will allocate a buffer on the heap.
            </para>
            </summary>
            <typeparam name="T">The type to write.</typeparam>
            <param name="value">The <see langword="unmanaged"/> <see langword="primitive"/> value to write.</param>
        </member>
        <member name="M:Revrs.RevrsWriter.Write``2(``0)">
            <summary>
            Write the provided <paramref name="value"/> and advance the stream position by <see langword="sizeof"/>(<typeparamref name="T"/>).
            <para>
            <typeparamref name="R"/>, implementing <see cref="M:Revrs.IStructReverser.Reverse(System.Span{System.Byte}@)"/>,
            will be used to reverse the written value when endian swapping is required.
            </para>
            <para>
            <b>Note:</b> Writing types larger than 500 KB will allocate a buffer on the heap.
            </para>
            </summary>
            <typeparam name="T">The type to write.</typeparam>
            <typeparam name="R">The <see cref="T:Revrs.IStructReverser"/> to reverse <typeparamref name="T"/></typeparam>
            <param name="value">The <see langword="unmanaged"/> <see langword="primitive"/> value to write.</param>
        </member>
    </members>
</doc>
